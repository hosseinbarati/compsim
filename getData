
#ifndef get_Data_H
#define get_Data_H

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

using namespace std;

#define MAX_STRING_LENGTH 20

//extern variables 
extern int Nx, Ny, Nz;				//Reservoir Dimension
extern double *gridDim;


class getData
{
public:
	int File_Search(FILE *fp, char *rSeek) {
		register int i;
		char str[MAX_STRING_LENGTH];
		rewind(fp);
		*str = '\0';
		do {
			i = Read_Word(fp, str);
			if (!strcmp(str, rSeek)) return -1;
		} while (i);
		return 0; //Nothing found
	}
	int Read_Word(FILE *fp, char *rWord) {
		register unsigned char ch;
		register int i = 0;
		*rWord = '\0';
		do {
			ch = getc(fp);
			if (feof(fp)) {
				return 0; //Nothing has been read
			}
		} while ((ch<33) || (ch>126));
		while ((ch>32) && (ch<127)) {
			*(rWord + i) = ch;
			i++;
			ch = getc(fp);
			if (feof(fp)) {
				*(rWord + i) = '\0';
				return 1; //Read, but end of file also encountered
			}
		}
		*(rWord + i) = '\0';
		return -1; //Correct execution
	}

	void Data_Input(FILE *fp) {

		char str[MAX_STRING_LENGTH], str1[MAX_STRING_LENGTH];
		register int i, j, k, n;
		double tempL;
		int eclint;
		int z = 0;

		//Dimension
		if (!File_Search(fp, "GRID")) TerM("No GRID keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect GRID keyword format in the input file!");
		Nx = atoi(str);
		if (!Read_Word(fp, str)) TerM("Incorrect GRID keyword format in the input file!");
		Ny = atoi(str);
		if (!Read_Word(fp, str)) TerM("Incorrect GRID keyword format in the input file!");
		Nz = atoi(str);
		int sumOfGrids = Nx*Ny*Nz;   //number of grid blocks


		//Number of Components
		if (!File_Search(fp, "NC")) TerM("No NC keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect NC keyword format in the input file!");
		PNc = atoi(str);
		if (!Read_Word(fp, str)) TerM("Incorrect NC keyword format in the input file!");
		UNc = atoi(str);
		Nc = PNc + UNc;

		//Saturation Tables
		if (!File_Search(fp, "SWT")) TerM("No SWT keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect SWT keyword format in the input file!");
		Nswt = atoi(str);
		if (!File_Search(fp, "SGT")) TerM("No SGT keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect SGT keyword format in the input file!");
		Nsgt = atoi(str);

		//Wells
		if (!File_Search(fp, "WELLS")) TerM("No WELLS keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect WELLS keyword format in the input file!");
		wellNO = atoi(str);
		
		
		Allocation();


		if (!File_Search(fp, "RESTEMP")) TerM("No RESTEMP keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect RESTEMP keyword format in the input file!");
		resTemp = atof(str) + 273.15;
		//Water Properties
		if (!File_Search(fp, "WATERPROPS")) TerM("No WATERPROPS keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect WATERPROPS keyword format in the input file!");
		watRo = atof(str);
		if (!Read_Word(fp, str)) TerM("Incorrect WATERPROPS keyword format in the input file!");
		watMu = atof(str);

		//////////block sizes (finite difference)//////////////
		if (!File_Search(fp, "DI")) TerM("No DI keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect DI keyword format in the input file!");
		if (!strcmp(str, "VAR")) for (i = 0; i<Nx; i++) {
			if (!Read_Word(fp, str1)) TerM("Incorrect DI keyword format in the input file!");
			gridDim[i] = atof(str1);
		}
		else if (!strcmp(str, "CON")){
			if (!Read_Word(fp, str1)) TerM("Incorrect DI keyword format in the input file!");
			tempL = atof(str1);
			for (i = 0; i<Nx; i++) gridDim[i] = tempL;
		}
		else {
			TerM("Incorrect DI keyword format in the input file!");
		}
		if (!File_Search(fp, "DJ")) TerM("No DJ keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect DJ keyword format in the input file!");
		if (!strcmp(str, "VAR")) for (i = Nx; i<(Nx + Ny); i++) {
			if (!Read_Word(fp, str1)) TerM("Incorrect DJ keyword format in the input file!");
			gridDim[i] = atof(str1);
		}
		else if (!strcmp(str, "CON")){
			if (!Read_Word(fp, str1)) TerM("Incorrect DJ keyword format in the input file!");
			tempL = atof(str1);
			for (i = Nx; i<(Nx + Ny); i++) gridDim[i] = tempL;
		}
		else {
			TerM("Incorrect DJ keyword format in the input file!");
		}
		if (!File_Search(fp, "DK")) TerM("No DK keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect DK keyword format in the input file!");
		if (!strcmp(str, "VAR")) for (i = (Nx + Ny); i<(Nx + Ny + Nz); i++) {
			if (!Read_Word(fp, str1)) TerM("Incorrect DK keyword format in the input file!");
			gridDim[i] = atof(str1);
		}
		else if (!strcmp(str, "CON")){
			if (!Read_Word(fp, str1)) TerM("Incorrect DK keyword format in the input file!");
			tempL = atof(str1);
			for (i = (Nx + Ny); i<(Nx + Ny + Nz); i++) gridDim[i] = tempL;
		}
		else {
			TerM("Incorrect DK keyword format in the input file!");
		}

		CalcBlockHeight();


		//Tortuosity
		if (!File_Search(fp, "TOR")) {
			
			puts("All tortuosity values reset to unity!");
			for (int i = 0; i < sumOfGrids; i++)
				tor[i] = 1;
		}
		else {
			if (!Read_Word(fp, str)) TerM("Incorrect TOR keyword format in the input file!");
			if (!strcmp(str, "VAR")) for (int i = 0; i < sumOfGrids; i++){
				if (!Read_Word(fp, str1)) TerM("Incorrect TOR keyword format in the input file!");
				tor[i] = atof(str1);
			}
			else if (!strcmp(str, "CON")){
				if (!Read_Word(fp, str1)) TerM("Incorrect TOR keyword format in the input file!");
				tempL = atof(str1);
				for (int i = 0; i < sumOfGrids; i++) tor[i] = tempL;
			}

			else if (!strcmp(str, "IVAR")){
				for (i = 0; i < Nx; i++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect TOR keyword format in the input file!");
					tor[z] = atof(str1);
					z++;
				}
				z = 0;
				for (i = Nx; i < sumOfGrids; i++){
					if (((i + 1) % Nx) == ((z + 1) % Nx)){
						tor[i] = tor[z];
						z++;
					}
					if (!((i + 1) % Nx)) z = 0;
				}
			}

			else if (!strcmp(str, "JVAR")){
				for (int j = 0; j < Ny; j++){
					if (!Read_Word(fp, str1)) TerM("Incorrect TOR keyword format in the input file!");
					tempL = atof(str1);
					for (int i = 0; i < Nx; i++)
						tor[z] = tempL;
				}
				for (z = Nx*Ny; z < someOfGrids; z++)
				if (((i + 1) % Nx*Ny) == ((z + 1) % Nx*Ny){
					tor[i] = tor[z];
					z++;
				}
				if (!((i + 1) % Nx*Ny))) z = 0;
			}


			else if (!strcmp(str, "KVAR")){
				for (k = 0; k < Nz; k++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect TOR keyword format in the input file!");
					tempL = atof(str1);
					for (j = 0; j < Ny; j++) for (i = 0; i < Nx; i++){
						tor[z] = tempL;
						z++;
					}
				}
			}
			else {
				TerM("Incorrect POR keyword format in the input file!");
			}
		}


		//POROSITY
		z = 0;
		if (!File_Search(fp, "POR")) TerM("No POR keyword in the input file!");
		if (!Read_Word(fp, str)) TerM("Incorrect POR keyword format in the input file!");
		if (!strcmp(str, "VAR")){
			for (int i = 0; i < someOfGrids; i++){
				if (!Read_Word(fp, str1)) TerM("Incorrect POR keyword format in the input file!");
				porosity[z] = atof(str1);
				z++;
				if (!porosity[z]) porosity[z] = 1e-5;
			}
		else if (!strcmp(str, "CON")){
			if (!Read_Word(fp, str1)) TerM("Incorrect POR keyword format in the input file!");
			tempL = atof(str1);
			for (int i = 0; i < someOfGrids; i++){
				porosity[z] = tempL;
				z++;
			}
			else if (!strcmp(str, "IVAR")){
				for (i = 0; i < Nx; i++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect POR keyword format in the input file!"); {
						porosity[z] = atof(str1);
						z++;
					}
				}

					for (i = Nx; i < sumOfGrids; i++){
						if (((i + 1) % Nx) == ((z + 1) % Nx){
							porosity[i] = porosity[z];
							z++;
						}
						if (!((i + 1) % Nx)) z = 0;
					}
				}
			else if (!strcmp(str, "JVAR")){
				for (int j = 0; j < Ny; j++){
					if (!Read_Word(fp, str1)) TerM("Incorrect POR keyword format in the input file!");
					tempL = atof(str1);
					for (int i = 0; i < Nx; i++)
						porosity[z] = tempL;
				}
				z = 0;
				for (z = Nx*Ny; z < someOfGrids; z++)
				if (((i + 1) % Nx*Ny) == ((z + 1) % Nx*Ny){
					porosity[i] = porosity[z];
					z++;
				}
				if (!((i + 1) % Nx*Ny)) z = 0;
			}

			else if (!strcmp(str, "KVAR")){
				for (k = 0; k < Nz; k++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect POR keyword format in the input file!");
					tempL = atof(str1);
					for (j = 0; j < Ny; j++) for (i = 0; i < Nx; i++){
						porosity[z] = tempL;
						z++;
					}
				}
			}
			else {
				TerM("Incorrect POR keyword format in the input file!");
			}

			//PERMEABILITY : it is classified into three categories according to three direction.
			//So we have three matrices for each direction. 
			//permi
			if (!File_Search(fp, "PERMI")) TerM("No PERMI keyword in the input file!");
			if (!Read_Word(fp, str)) TerM("Incorrect PERMI keyword format in the input file!");
			if (!strcmp(str, "VAR")) for (int z = 0; z < sumOfGrids; z++) {
				if (!Read_Word(fp, str1)) TerM("Incorrect PERMI keyword format in the input file!");
				permi[z] = atof(str1);
				z++;
			}


			else if (!strcmp(str, "CON")){
				if (!Read_Word(fp, str1)) TerM("Incorrect PERMI keyword format in the input file!");
				tempL = atof(str1);
				for (int z = 0; z < sumOfGrids; z++) permi[z] = tempL;
			}
			else if (!strcmp(str, "IVAR")){
				for (i = 0; i < Nx; i++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect PERMI keyword format in the input file!");
					permi[z] = atof(str1);
					z++
				}
				z = 0;
				for (i = Nx; i < sumOfGrids; i++){
					if (((i + 1) % Nx) == ((z + 1) % Nx)){
						permi[i] = permi[z];
						z++;
					}
					if (!((i + 1) % Nx)) z = 0;
				}
			}
			else if (!strcmp(str, "JVAR")){
				for (j = 0; i < Ny; j++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect PERMI keyword format in the input file!");
					tempL = atof(str1);
					for (i = 0; i < Nx; i++){
						permi[z] = tempL;
						z++;
					}
					for (i = Nx*Ny; i < someOfGrids; i++)
					if (((i + 1) % Nx*Ny) == ((z + 1) % Nx*Ny){
						permi[i] = permi[z];
						z++;
					}
					if (!((i + 1) % Nx*Ny)) z = 0;
				}
			}
			else if (!strcmp(str, "KVAR")){
				for (k = 0; k < Nz; k++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect PERMI keyword format in the input file!");
					tempL = atof(str1);
					for (j = 0; j < Ny; j++) for (i = 0; i < Nx; i++){
						permi[z] = tempL;
						z++;
					}
				}
			}
			else {
				TerM("Incorrect PERMI keyword format in the input file!");
			}

			//permj

			if (!File_Search(fp, "PERMJ")) TerM("No PERMJ keyword in the input file!");
			if (!Read_Word(fp, str)) TerM("Incorrect PERMJ keyword format in the input file!");
			if (!strcmp(str, "VAR")) for (int z = 0; z < sumOfGrids; z++) {
				if (!Read_Word(fp, str1)) TerM("Incorrect PERMJ keyword format in the input file!");
				permj[z] = atof(str1);
				z++;
			}


			else if (!strcmp(str, "CON")){
				if (!Read_Word(fp, str1)) TerM("Incorrect PERMJ keyword format in the input file!");
				tempL = atof(str1);
				for (int z = 0; z < sumOfGrids; z++) permi[z] = tempL;
			}
			else if (!strcmp(str, "IVAR")){
				for (i = 0; i < Nx; i++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect PERMJ keyword format in the input file!");
					permj[z] = atof(str1);
					z++
				}
				z = 0;
				for (i = Nx; i < sumOfGrids; i++){
					if (((i + 1) % Nx) == ((z + 1) % Nx){
						permj[i] = permj[z];
						z++;
					}
					if (!((i + 1) % Nx)) z = 0;
				}
			}
			else if (!strcmp(str, "JVAR")){
				for (j = 0; i < Ny; j++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect PERMJ keyword format in the input file!");
					tempL = atof(str1);
					for (i = 0; i < Nx; i++){
						permj[z] = tempL;
						z++;
					}
					z = 0;
					for (i = Nx*Ny; i < someOfGrids; i++)
					if (((i + 1) % Nx*Ny) == ((z + 1) % Nx*Ny){
						permj[i] = permj[z];
						z++;
					}
					if (!((i + 1) % Nx*Ny)) z = 0;
				}
			}
			else if (!strcmp(str, "KVAR")){
				for (k = 0; k < Nz; k++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect PERMJ keyword format in the input file!");
					tempL = atof(str1);
					for (j = 0; j < Ny; j++) for (i = 0; i < Nx; i++){
						permj[z] = tempL;
						z++;
					}
				}
			}
			else {
				TerM("Incorrect PERMJ keyword format in the input file!");
			}

			//permk
			if (!File_Search(fp, "PERMK")) TerM("No PERMK keyword in the input file!");
			if (!Read_Word(fp, str)) TerM("Incorrect PERMK keyword format in the input file!");
			if (!strcmp(str, "VAR")) for (int z = 0; z < sumOfGrids; z++) {
				if (!Read_Word(fp str1)) TerM("Incorrect PERMK keyword format in the input file!");
				permk[z] = atof(str1);
				z++;
			}


			else if (!strcmp(str, "CON")){
				if (!Read_Word(fp, str1)) TerM("Incorrect PERMK keyword format in the input file!");
				tempL = atof(str1);
				for (int z = 0; z < sumOfGrids; z++) permk[z] = tempL;
			}
			else if (!strcmp(str, "IVAR")){
				for (i = 0; i < Nx; i++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect PERMK keyword format in the input file!");
					permk[z] = atof(str1);
					z++
				}

				for (i = Nx; i < sumOfGrids; i++){
					if (((i + 1) % Nx) == ((z + 1) % Nx){
						permk[i] = permk[z];
						z++;
					}
					if (!((i + 1) % Nx)) z = 0;
				}
			}
			else if (!strcmp(str, "JVAR")){
				for (j = 0; i < Ny; j++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect PERMK keyword format in the input file!");
					tempL = atof(str1);
					for (i = 0; i < Nx; i++){
						permk[z] = tempL;
						z++;
					}
					for (i = Nx*Ny; i < someOfGrids; i++)
					if (((i + 1) % Nx*Ny) == ((z + 1) % Nx*Ny){
						permk[i] = permk[z];
						z++;
					}
					if (!((i + 1) % Nx*Ny)) z = 0;
				}
			}
			else if (!strcmp(str, "KVAR")){
				for (k = 0; k < Nz; k++) {
					if (!Read_Word(fp, str1)) TerM("Incorrect PERMK keyword format in the input file!");
					tempL = atof(str1);
					for (j = 0; j < Ny; j++) for (i = 0; i < Nx; i++){
						permk[z] = tempL;
						z++;
					}
				}
			}
			else {
				TerM("Incorrect PERMK keyword format in the input file!");
			}


			//Compressibility
			if (!File_Search(fp, "REFP")) {
				puts("Warning: No REFP keyword in the input file!");
				refP = 0;
			}
			else {
				if (!Read_Word(fp, str)) TerM("Incorrect REFP keyword format in the input file!");
				refP = atof(str);
			}
			if (!File_Search(fp, "CPOR")) {
				puts("Warning: No CPOR keyword in the input file!");
				cpor = 0;
			}
			else {
				if (!Read_Word(fp, str)) TerM("Incorrect CPOR keyword format in the input file!");
				cpor = atof(str);
			}
			if (!File_Search(fp, "DCPOR")) {
				puts("Warning: No DCPOR keyword in the input file!");
				dcpor = 0;
			}
			else {
				if (!Read_Word(fp, str)) TerM("Incorrect DCPOR keyword format in the input file!");
				dcpor = atof(str);
			}


			//EOS Type
			if (!File_Search(fp, "MODEL")) TerM("No EOS MODEL keyword in the input file!");
			if (!Read_Word(fp, str)) TerM("Incorrect EOS MODEL keyword format in the input file!");
			if (!strcmp(str, "PR")) {
				PR = 1;
				SRK = 0;
			}
			else if (!strcmp(str, "SRK")) {
				PR = 0;
				SRK = 1;
			}
			else{
				TerM("Incorrect EOS keyword format in the input file!");
			}

			if (UNc) {
				if (!File_Search(fp, "SG")) puts("Warning: No SG keyword in the input file!");
				else for (i = PNc; i<Nc; i++) {
					if (!Read_Word(fp, str)) TerM("Incorrect SG keyword format in the input file!");
					fluidProp[i][SG] = atof(str);
				}
				if (!File_Search(fp, "TB")) puts("Warning: No TB keyword in the input file!");
				else for (i = PNc; i<Nc; i++) {
					if (!Read_Word(fp, str)) TerM("Incorrect TB keyword format in the input file!");
					fluidProp[i][TB] = atof(str);
				}
				if (!File_Search(fp, "MW")) puts("Warning: No MW keyword in the input file!");
				else for (i = PNc; i<Nc; i++) {
					if (!Read_Word(fp, str)) TerM("Incorrect MW keyword format in the input file!");
					fluidProp[i][MW] = atof(str);
				}
				if (!File_Search(fp, "AC")) puts("Warning: No AC keyword in the input file!");
				else for (i = PNc; i<Nc; i++) {
					if (!Read_Word(fp, str)) TerM("Incorrect AC keyword format in the input file!");
					fluidProp[i][AC] = atof(str);
				}
				if (!File_Search(fp, "PCRIT")) puts("Warning: No PCRIT keyword in the input file!");
				else for (i = PNc; i<Nc; i++) {
					if (!Read_Word(fp, str)) TerM("Incorrect PCRIT keyword format in the input file!");
					fluidProp[i][PCRIT] = atof(str);
				}
				if (!File_Search(fp, "TCRIT")) puts("Warning: No TCRIT keyword in the input file!");
				else for (i = PNc; i<Nc; i++) {
					if (!Read_Word(fp, str)) TerM("Incorrect TCRIT keyword format in the input file!");
					fluidProp[i][TCRIT] = atof(str);
				}
				if (!File_Search(fp, "VCRIT")) puts("Warning: No VCRIT keyword in the input file!");
				else for (i = PNc; i<Nc; i++) {
					if (!Read_Word(fp, str)) TerM("Incorrect VCRIT keyword format in the input file!");
					fluidProp[i][VCRIT] = atof(str);
				}
			}

			CPlus_Props();


			if (!File_Search(fp, "COMPNAME")) TerM("No COMPNAME keyword in the input file!");
			for (i = 0; i<PNc; i++) {
				if (!Read_Word(fp, str)) TerM("Incorrect COMPNAME keyword format in the input file!");
				if (!strcmp(str, "C1")) {
					fluidProp[i][MW] = 16.043;
					fluidProp[i][TCRIT] = 190.56;
					fluidProp[i][PCRIT] = 4599000;
					fluidProp[i][VCRIT] = 98.6;
					fluidProp[i][AC] = 0.008; //edited
					fluidProp[i][PARACHOR] = 74.05;
				}
				else if (!strcmp(str, "C2")) {
					fluidProp[i][MW] = 30.070;
					fluidProp[i][TCRIT] = 305.32;
					fluidProp[i][PCRIT] = 4872000;
					fluidProp[i][VCRIT] = 145.5;
					fluidProp[i][AC] = 0.0995;
					fluidProp[i][PARACHOR] = 112.91;
				}
				else if (!strcmp(str, "C3")) {
					fluidProp[i][MW] = 44.096;
					fluidProp[i][TCRIT] = 369.83;
					fluidProp[i][PCRIT] = 4248000;
					fluidProp[i][VCRIT] = 200;
					fluidProp[i][AC] = 0.1523;
					fluidProp[i][PARACHOR] = 154.03;
				}
				else if (!strcmp(str, "iC4")) {
					fluidProp[i][MW] = 58.123;
					fluidProp[i][TCRIT] = 408.14;
					fluidProp[i][PCRIT] = 3648000;
					fluidProp[i][VCRIT] = 262.7;
					fluidProp[i][AC] = 0.1770;
					fluidProp[i][PARACHOR] = 185.32;
				}
				else if (!strcmp(str, "nC4")) {
					fluidProp[i][MW] = 58.123;
					fluidProp[i][TCRIT] = 425.12;
					fluidProp[i][PCRIT] = 3796000;
					fluidProp[i][VCRIT] = 255;
					fluidProp[i][AC] = 0.2002;
					fluidProp[i][PARACHOR] = 193.90;
				}
				else if (!strcmp(str, "iC5")) {
					fluidProp[i][MW] = 72.150;
					fluidProp[i][TCRIT] = 460.43;
					fluidProp[i][PCRIT] = 3381000;
					fluidProp[i][VCRIT] = 305.8;
					fluidProp[i][AC] = 0.2275;
					fluidProp[i][PARACHOR] = 229.37;
				}
				else if (!strcmp(str, "nC5")) {
					fluidProp[i][MW] = 72.150;
					fluidProp[i][TCRIT] = 469.7;
					fluidProp[i][PCRIT] = 3370000;
					fluidProp[i][VCRIT] = 313;
					fluidProp[i][AC] = 0.2515;
					fluidProp[i][PARACHOR] = 236.00;
				}
				else if (!strcmp(str, "nC6")) {
					fluidProp[i][MW] = 86.177;
					fluidProp[i][TCRIT] = 507.6;
					fluidProp[i][PCRIT] = 3025000;
					fluidProp[i][VCRIT] = 371;
					fluidProp[i][AC] = 0.3013;
					fluidProp[i][PARACHOR] = 276.71;
				}
				else if (!strcmp(str, "nC7")) {
					fluidProp[i][MW] = 100.204;
					fluidProp[i][TCRIT] = 540.2;
					fluidProp[i][PCRIT] = 2740000;
					fluidProp[i][VCRIT] = 428;
					fluidProp[i][AC] = 0.3495;
					fluidProp[i][PARACHOR] = 318.44;
				}
				else if (!strcmp(str, "nC8")) {
					fluidProp[i][MW] = 114.231;
					fluidProp[i][TCRIT] = 568.7;
					fluidProp[i][PCRIT] = 2490000;
					fluidProp[i][VCRIT] = 486;
					fluidProp[i][AC] = 0.3996;
					fluidProp[i][PARACHOR] = 359.33;
				}
				else if (!strcmp(str, "nC9")) {
					fluidProp[i][MW] = 128.258;
					fluidProp[i][TCRIT] = 594.6;
					fluidProp[i][PCRIT] = 2290000;
					fluidProp[i][VCRIT] = 544;
					fluidProp[i][AC] = 0.4435;
					fluidProp[i][PARACHOR] = 399.57;
				}
				else if (!strcmp(str, "nC10")) {
					fluidProp[i][MW] = 142.285;
					fluidProp[i][TCRIT] = 617.7;
					fluidProp[i][PCRIT] = 2110000;
					fluidProp[i][VCRIT] = 600;
					fluidProp[i][AC] = 0.4923;
					fluidProp[i][PARACHOR] = 440.69;
				}
				else if (!strcmp(str, "nC11")) {
					fluidProp[i][MW] = 156.312;
					fluidProp[i][TCRIT] = 639;
					fluidProp[i][PCRIT] = 1949000;
					fluidProp[i][VCRIT] = 659;
					fluidProp[i][AC] = 0.5303;
					fluidProp[i][PARACHOR] = 482.00;
				}
				else if (!strcmp(str, "nC12")) {
					fluidProp[i][MW] = 170.338;
					fluidProp[i][TCRIT] = 658;
					fluidProp[i][PCRIT] = 1820000;
					fluidProp[i][VCRIT] = 716;
					fluidProp[i][AC] = 0.5764;
					fluidProp[i][PARACHOR] = 522.26;
				}
				else if (!strcmp(str, "nC13")) {
					fluidProp[i][MW] = 184.365;
					fluidProp[i][TCRIT] = 675;
					fluidProp[i][PCRIT] = 1680000;
					fluidProp[i][VCRIT] = 775;
					fluidProp[i][AC] = 0.6174;
					fluidProp[i][PARACHOR] = 536.77;
				}
				else if (!strcmp(str, "nC14")) {
					fluidProp[i][MW] = 198.392;
					fluidProp[i][TCRIT] = 693;
					fluidProp[i][PCRIT] = 1570000;
					fluidProp[i][VCRIT] = 830;
					fluidProp[i][AC] = 0.6430;
					fluidProp[i][PARACHOR] = 606.05;
				}
				else if (!strcmp(str, "nC15")) {
					fluidProp[i][MW] = 212.419;
					fluidProp[i][TCRIT] = 708;
					fluidProp[i][PCRIT] = 1480000;
					fluidProp[i][VCRIT] = 889;
					fluidProp[i][AC] = 0.6863;
					fluidProp[i][PARACHOR] = 647.43;
				}
				else if (!strcmp(str, "nC16")) {
					fluidProp[i][MW] = 226.446;
					fluidProp[i][TCRIT] = 723;
					fluidProp[i][PCRIT] = 1400000;
					fluidProp[i][VCRIT] = 944;
					fluidProp[i][AC] = 0.7174;
					fluidProp[i][PARACHOR] = 688.50;
				}
				else if (!strcmp(str, "nC17")) {
					fluidProp[i][MW] = 240.473;
					fluidProp[i][TCRIT] = 736;
					fluidProp[i][PCRIT] = 1340000;
					fluidProp[i][VCRIT] = 1000;
					fluidProp[i][AC] = 0.7697;
					fluidProp[i][PARACHOR] = 730.05;
				}
				else if (!strcmp(str, "nC18")) {
					fluidProp[i][MW] = 254.5;
					fluidProp[i][TCRIT] = 747;
					fluidProp[i][PCRIT] = 1270000;
					fluidProp[i][VCRIT] = 1060;
					fluidProp[i][AC] = 0.8114;
					fluidProp[i][PARACHOR] = 771.95;
				}
				else if (!strcmp(str, "nC19")) {
					fluidProp[i][MW] = 268.527;
					fluidProp[i][TCRIT] = 758;
					fluidProp[i][PCRIT] = 1210000;
					fluidProp[i][VCRIT] = 1120;
					fluidProp[i][AC] = 0.8522;
					fluidProp[i][PARACHOR] = 813.85;
				}
				else if (!strcmp(str, "nC20")) {
					fluidProp[i][MW] = 282.553;
					fluidProp[i][TCRIT] = 768;
					fluidProp[i][PCRIT] = 1160000;
					fluidProp[i][VCRIT] = 1170;
					fluidProp[i][AC] = 0.9069;
					fluidProp[i][PARACHOR] = 853.67;
				}
				else if (!strcmp(str, "nC21")) {
					fluidProp[i][MW] = 296.580;
					fluidProp[i][TCRIT] = 781.7;
					fluidProp[i][PCRIT] = 1147000;
					fluidProp[i][VCRIT] = 1198;
					fluidProp[i][AC] = 0.9220;
					fluidProp[i][PARACHOR] = 897.64;
				}
				else if (!strcmp(str, "nC22")) {
					fluidProp[i][MW] = 310.610;
					fluidProp[i][TCRIT] = 791.8;
					fluidProp[i][PCRIT] = 1101000;
					fluidProp[i][VCRIT] = 1253;
					fluidProp[i][AC] = 0.9550;
					fluidProp[i][PARACHOR] = 939.55;
				}
				else if (!strcmp(str, "nC23")) {
					fluidProp[i][MW] = 324.630;
					fluidProp[i][TCRIT] = 801.3;
					fluidProp[i][PCRIT] = 1059000;
					fluidProp[i][VCRIT] = 1307;
					fluidProp[i][AC] = 0.9890;
					fluidProp[i][PARACHOR] = 981.43;
				}
				else if (!strcmp(str, "nC24")) {
					fluidProp[i][MW] = 338.680;
					fluidProp[i][TCRIT] = 810.4;
					fluidProp[i][PCRIT] = 1019000;
					fluidProp[i][VCRIT] = 1362;
					fluidProp[i][AC] = 1.0190;
					fluidProp[i][PARACHOR] = 1023.40;
				}
				else if (!strcmp(str, "CO2")) {
					fluidProp[i][MW] = 44.010;
					fluidProp[i][TCRIT] = 304.19;
					fluidProp[i][PCRIT] = 7382000;
					fluidProp[i][VCRIT] = 94;
					fluidProp[i][AC] = 0.2276;
					fluidProp[i][PARACHOR] = 82.00;
				}
				else if (!strcmp(str, "O2")) {
					fluidProp[i][MW] = 31.999;
					fluidProp[i][TCRIT] = 154.58;
					fluidProp[i][PCRIT] = 5043000;
					fluidProp[i][VCRIT] = 73.4;
					fluidProp[i][AC] = 0.0218;
				}
				else if (!strcmp(str, "N2")) {
					fluidProp[i][MW] = 28.014;
					fluidProp[i][TCRIT] = 126.1;
					fluidProp[i][PCRIT] = 3394000;
					fluidProp[i][VCRIT] = 90.1;
					fluidProp[i][AC] = 0.0403;
					fluidProp[i][PARACHOR] = 61.12;
				}
				else if (!strcmp(str, "H2S")) {
					fluidProp[i][MW] = 34.082;
					fluidProp[i][TCRIT] = 373.53;
					fluidProp[i][PCRIT] = 8963000;
					fluidProp[i][VCRIT] = 98.5;
					fluidProp[i][AC] = 0.0827;
					fluidProp[i][PARACHOR] = 85.50;
				}
				else if (!strcmp(str, "SO2")) {
					fluidProp[i][MW] = 64.065;
					fluidProp[i][TCRIT] = 430.75;
					fluidProp[i][PCRIT] = 7884000;
					fluidProp[i][VCRIT] = 122;
					fluidProp[i][AC] = 0.2451;
				}
				else if (!strcmp(str, "H2")) {
					fluidProp[i][MW] = 2.016;
					fluidProp[i][TCRIT] = 33.18;
					fluidProp[i][PCRIT] = 1313000;
					fluidProp[i][VCRIT] = 64.2;
					fluidProp[i][AC] = 0.2150;
				}
				else if (!strcmp(str, "H2O")) {
					fluidProp[i][MW] = 18.015;
					fluidProp[i][TCRIT] = 647.13;
					fluidProp[i][PCRIT] = 22055000;
					fluidProp[i][VCRIT] = 56;
					fluidProp[i][AC] = 0.3449;
				}
				else {
					TerM("Unknown Component!");
				}
			}

			EOS_Init();



			

	
	
	getData();
	~getData();

private:
	double *porosity = new double[0];
	double *permi = new double[0];			//Permeability 
	double *permj = new double[0];
	double *permk = new double[0];
	double refP, cpor, dcpor;	//Compressibility
	unsigned char PR, SRK;		//EOS Type, boolean
	double **fluidProp;
	int PNc, UNc, Nc;			//Number of Components
};

getData::getData()
{
}

getData::~getData()
{
	delete[] porosity;
	delete[] permi;
	delete[] permj;
	delete[] permk;
	delete[] fluidProp;

}

#endif
